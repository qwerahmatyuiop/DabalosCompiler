Author: Rahmat Peter I. Dabalos, CMSC 129
Program Description: A Simple Interpreter/Compiler Written in java. 

Terminals:					Meaning
	if 						keyword for if statements
	else					keyword for else statements
	while					keyword for iteration statements
	void 					keyword for void types
	char 					char type specifier
	String 					String type specifier
	int 					int type specifier
	boolean                 boolean type specifier
	float                   float type specifier
	{                       open bracket
	}						close bracket
	(                       open parenthesis
	)                       close parenthesis
	[                       open brace
	]                       close brace
	;                       semi-colon, as delimiter
	,                       comma
	!=                      NE_OP operator / not equal
	<=                      LE_EQ operator / less than or equal
	>=                      GR_EQ operator / greater than or equal
	<                       LE operator / less than
	>                       GR operator / greater than
	==                      EQ_OP / equals operator
	&&                      AND_OP/ and operator
	||                      OR_OP/ or operator
	(-)?[0-9]+\\.[0-9]+     FLOAT_LIT
	(-)?[0-9]+              INT_LIT
	\.[^\]*\           STRING_LIT
	--                      DEC_OP
	++                      INC OP
	=                       ASSIGN
	+                       ADDITION
	minus                   SUBTRACTION
	*                       MULTIPLICATION
	/						DIVISION
	%                       MODULUS
	//EXTRA FUNCTIONALITIES
	readFile 			    Keyword for Reading File and saving it to a string
	readIntFile             Keyword for Reading File and saving it to an array
	writeIntFile            Keyword for Writing File from a string
	writeFile               Keyword for Writing File from an array
	
	println                 Keyword for printing with new line
	print                   Keyword for printing 
	scan                    Keyword for scanning
	func                    Keyword for defining a function
	rand                    Keyword for getting random number
	getSD                   Keyword for getting the sd 
	GLOBAL                  Keyword for declaration of identifiers
	call                    Keyword for calling functions
	reverse                 Keyword for reversing a string
	Array.Add               Keyword for adding to array an int
	Array.Remove            Keyword for removing an item to an array
	Array.Sort              Keyword for sorting an array
	Array.DescSort          Keyword for sorting desc an array
	(true|false)            Boolean Literals
	[a-zA-Z][a-zA-Z0-9_]*   Identifier
	White spaces are ignored
	
Non-Terminals and Grammar:
	
	^starting point of statements
	entry_point -> entry_point external_declaration 
	  			|  entry_point statement
	  			|  external_declaration
	  			|  statement
	
	
	*creating functions and variables:

	external_declaration -> 	FUNC function_definition
 								| GLOBAL declaration
 	function_definition -> 		type_specifier IDENTIFIER '(' ')' compound_statement

	type_specifier -> 			VOID|CHAR|STRING|INT|BOOLEAN|FLOAT

	declaration ->				type_specifier init_declarator_list ';'

	init_declarator_list -> 	init_declarator
								| init_declarator_list ',' init_declarator

	init_declarator -> 			declarator
								| declarator '=' initializer

	declarator - >				IDENTIFIER
								| IDENTIFIER '[' ']'

	initializer->				assignment_expression

	*statements in the language

	statement ->				compound_statement
								| expression_statement
								| selection_statement
								| iteration_statement
								| print_statement
								| println_statement
								| arrayAdd_statement
								| call_statement
								| writeFile_statement
								| writeIntFile_statement

	compound_statement	->			'{' '}'
									| '{' block_item_list '}'
		

	block_item_list ->				block_item
									| block_item_list block_item

	block_item->					 declaration
									| statement

	selection_statement->			if '(' assignment_expression ')' statement
									| if '(' assighment_expression ')' statement else statement

	iteration_statement->			while '(' assignment_expression ')' statement
		
	print_statement->				print '(' assignment_expression ')' ';'

	println_statement->				println '(' assignment_expression ')' ';'

	arrayAdd_statement->			Array.Add '(' IDENTIFIER ','' primary_expression  ')' ';'

	writeFile_statement ->			writeFile '('STRING_LIT ',' IDENTIFIER')' ';'

	writeIntFile_statement ->		writeIntFile '('STRING_LIT ',' IDENTIFIER')' ';'

	call_statement ->				call IDENTIFIER '(' ')' ';'

	expression_statement->			assignment_expression ';' | ';'

	*Expressions:

	assignment_expression->			logical_or_expression
									| IDENTIFIER assignment_operator assignment_expression
									| reverse_expression
									| scan_expression
									| readFile_expression
									| arrayFunctions
									| random_expression
									| getSD_expression
									| readIntFile_expression

	assignment_operator->			=

	logical_or_expression->			logical_and_expression
									| logical_and_expression {{OR_OP logical_and_expression}
		
	logical_and_expression->		 equality_expression
									| equality_expression {{AND_OP equality_expression}

	equality_expression->			additive_expression
									| additive_expression {{EQ_OP additive_expression}
									| additive_expression {{NE_OP additive_expression}
									| additive_expression {{GR_EQ additive_expression}
									| additive_expression {{LE_EQ additive_expression}
									| additive_expression {{GR additive_expression}
									| additive_expression {{LE additive_expression}

	additive_expression->			multiplicative_expression
									| multiplicative_expression {{'+' multiplicative_expression}
									| multiplicative_expression {{'-' multiplicative_expression}
									
	multiplicative_expression->		 postfix_expression
									| postfix_expression {{ '*' postfix_expression}
									| postfix_expression {{ '/' postfix_expression}
									| postfix_expression {{ '%' postfix_expression}

	postfix_expression->			 primary_expression
									| postfix_expression '[' ']'
									| postfix_expression INC_OP
									| postfix_expression DEC_PO
		

	primary_expression ->			 IDENTIFIER
									| INT_LITERAL
									| FLOAT_LITERAL
									| STRING_LITERAL
									| BOOLEAN_LITERAL
									

	reverse_expression->			reverse '(' IDENTIFIER ')' 
									| reverse '(' STRING_LIT')'
	
	scan_expression->				scan		'('')'
	
	readFile_expression->			readFile	'('(IDENTIFIER|STRING_LIT)')'
	
	arrayFunctions->				Array.Get '('IDENTIFIER',' integer_instances')'
									|Array.Remove '('IDENTIFIER','integer_instances')'
									|Array.Sort '('IDENTIFIER')'
									|Array.DescSort '('IDENTIFIER')'
	
	integer_instances -> 			IDENTIFIER|INT_LIT
	
	random_expression->				rand '(' INTEGER_LIT ')'
	
	getSD_expression->				getSD '('integer_instances',' integer_instances')'
	
	readIntFile_expression->		readIntFile '('(IDENTIFIER|STRING_LIT)',' IDENTIFIER')'
	
	Variables Scoping:
		All variables should be declared Globally.

	
References:
	http://cogitolearning.co.uk/?p=600
	http://www.quut.com/c/ANSI-C-grammar-y.html
