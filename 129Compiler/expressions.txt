translation_unit 								//start
	: external_declaration
	| translation_unit external_declaration
	;

external_declaration
	: function_definition
	| "GLOBAL" declaration
	;

function_definition
	: func type_specifier IDENTIFIER '(' parameters ')' compound_statement
	;

parameters
	: type_specifier declarator
	| parameters type_specifier declarator
	i


assignment_expression
	: logical_or_expression
	| IDENTIFIER assignment_operator assignment_expression
	;


postfix_expression
	: primary_expression
	| postfix_expression '[' expression ']'
	| postfix_expression INC_OP
	| postfix_expression DEC_PO
	;

primary_expression
	: IDENTIFIER
	| INT_LITERAL
	| FLOAT_LITERAL
	| STRING_LITERAL
	| BOOLEAN_LITERAL
	;

logical_or_expression
	: logical_and_expression
	| logical_and_expression {{OR_OP logical_and_expression}
	;
logical_and_expression
	: equality_expression
	| equality_expression {{AND_OP equality_expression}
	;
equality_expression
	: additive_expression
	| additive_expression {{EQ_OP additive_expression}
	| additive_expression {{NE_OP additive_expression}
	| additive_expression {{GR_EQ additive_expression}
	| additive_expression {{LE_EQ additive_expression}
	| additive_expression {{GR additive_expression}
	| additive_expression {{LE additive_expression}
	;
additive_expression
	: multiplicative_expression
	| multiplicative_expression {{'+' multiplicative_expression}
	| multiplicative_expression {{'-' multiplicative_expression}
	;
multiplicative_expression
	: postfix_expression
	| postfix_expression {{ '*' postfix_expression}
	| postfix_expression {{ '/' postfix_expression}
	| postfix_expression {{ '%' postfix_expression}
	;
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-


declaration
	 type_specifier init_declarator_list ';'
	;

init_declarator_list
	: init_declarator
	| init_declarator_list ',' init_declarator
	;

init_declarator
	: declarator
	| declarator '=' initializer
	;


declarator
	: IDENTIFIER
	| '(' declarator ')'
	| declarator '[' assignment_expression ']'
	;

initializer
	: assignment_expression


type_specifier
	: VOID
	| CHAR
	| STRING
	| INT
	| BOOLEAN
	| FLOAT
	;


statement
	: compound_statement
	| expression_statement
	| selection_statement
	| iteration_statement
	| jump_statement
	| scan_statement
	|print_statement
	|println_statement
	;

compound_statement
	: '{' '}'
	| '{' block_item_list '}'
	;

block_item_list
	: block_item
	| block_item_list block_item
	;

block_item
	: declaration
	| statement
	;

expression_statement
	: ';'
	| assignment_expression ';'
	;

selection_statement
	: IF '(' assignment_expression ')' statement
	| IF '(' assighment_expression ')' statement ELSE statement
	;

iteration_statement
	: WHILE '(' assignment_expression ')' statement
	;

jump_statement
	| CONTINUE ';'
	| BREAK ';'
	| RETURN ';'
	| RETURN assignment_expression ';'
	;
print_statement
	: print '(' input_file ')' ';'
	;
input_file
	:STDIN
	| expression
	;
TERMINALS

"+="			 ADD_ASSIGN
"-="			 SUB_ASSIGN
"*="			 MUL_ASSIGN
"/="			 DIV_ASSIGN
"%="			 MOD_ASSIGN
"&="			 AND_ASSIGN
"--"			 DEC_OP
"->"			 PTR_OP
"&&"			 AND_OP
"||"			 OR_OP
"<="			 LE_OP
">="			 GE_OP
"=="			 EQ_OP
"!="			 NE_OP
">"
"<"
">="
"<="
";"			 ';'


[a-zA-Z][a-zA-Z0-9_]*	IDENTIFIER
(-)?[0-9]+				INT LITERAL
(-)?[0-9]+\.[0-9]+		FLOAT LITERAL
(true|false)			BOOLEAN LITERAL
\"\w\" 					CHAR LITERAL
\".*\"					STRING LITERAL

(int|String|Char|Boolean|float) TYPE

references : 